// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String
    screen_name        String    @unique @default(cuid())
    location           String?
    url                String?
    description        String?
    protected          Boolean   @default(false)
    verified           Boolean   @default(false)
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    password           String?
    role               UserRole  @default(USER)
    created_at         DateTime  @default(now())
    favorites_count    Int       @default(0)
    posts_count        Int       @default(0)
    profile_banner_url String?
    profile_image_url  String?
    accounts           Account[]
    sessions           Session[]
    posts              Post[]
    likes              Like[]
    reposts            Repost[]
}

enum UserRole {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id                      String   @id @default(cuid())
    text                    String?
    source                  String   @default("web")
    in_reply_to_user_id     String?
    in_reply_to_screen_name String?
    is_quote_status         Boolean  @default(false)
    quoted_status_id        String?
    quote_count             Int      @default(0)
    reply_count             Int      @default(0)
    repost_count            Int      @default(0)
    favorite_count          Int      @default(0)
    lang                    String   @default("en")
    created_at              DateTime @default(now())
    author                  User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
    author_id               String
    media                   Media[]
    likes                   Like[]
    reposts                 Repost[]
    quotes                  Post[]   @relation("quoted_post")
    quoted_post_id          String?
    quoted_post             Post?    @relation("quoted_post", fields: [quoted_post_id], references: [id])
    comments                Post[]   @relation("post-comment")
    in_reply_to_status_id   String?
    post_comment            Post?    @relation("post-comment", fields: [in_reply_to_status_id], references: [id])
}

model Repost {
    id         String   @id @default(cuid())
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    String
    user       User     @relation(fields: [user_id], references: [id])
    user_id    String
    created_at DateTime @default(now())
}

model Media {
    id         String  @id @default(cuid())
    media_url  String
    media_type String
    media_path String
    post       Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    String?
}

model Hashtag {
    id         String   @id @default(cuid())
    text       String
    hashtag    String   @unique
    score      Int      @default(1)
    created_at DateTime @default(now())
}

model Like {
    id         String   @id @default(cuid())
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    String
    user       User     @relation(fields: [user_id], references: [id])
    user_id    String
    created_at DateTime @default(now())
}
